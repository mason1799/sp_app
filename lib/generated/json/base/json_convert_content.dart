// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:konesp/entity/assist_member_entity.dart';
import 'package:konesp/entity/captcha_auth_entity.dart';
import 'package:konesp/entity/check_stuffs_entity.dart';
import 'package:konesp/entity/check_update_entity.dart';
import 'package:konesp/entity/contract_entity.dart';
import 'package:konesp/entity/custom_field_list_entity.dart';
import 'package:konesp/entity/customer_sign_entity.dart';
import 'package:konesp/entity/dashboard_entity.dart';
import 'package:konesp/entity/department_info_entity.dart';
import 'package:konesp/entity/device_project_entity.dart';
import 'package:konesp/entity/equipment_detail_entity.dart';
import 'package:konesp/entity/fix_detail_entity.dart';
import 'package:konesp/entity/fix_order_process_entity.dart';
import 'package:konesp/entity/group_member_entity.dart';
import 'package:konesp/entity/help_center_entity.dart';
import 'package:konesp/entity/iot_entity.dart';
import 'package:konesp/entity/location_entity.dart';
import 'package:konesp/entity/login_entity.dart';
import 'package:konesp/entity/main_response_entity.dart';
import 'package:konesp/entity/maintaine_group_entity.dart';
import 'package:konesp/entity/member_data_entity.dart';
import 'package:konesp/entity/message_entity.dart';
import 'package:konesp/entity/message_list_entity.dart';
import 'package:konesp/entity/order_rule_entity.dart';
import 'package:konesp/entity/oss_token_entity.dart';
import 'package:konesp/entity/over_time_entity.dart';
import 'package:konesp/entity/project_detail_entity.dart';
import 'package:konesp/entity/project_entity.dart';
import 'package:konesp/entity/regular_detail_entity.dart';
import 'package:konesp/entity/regular_order_process_entity.dart';
import 'package:konesp/entity/search_summary_entity.dart';
import 'package:konesp/entity/service_group_entity.dart';
import 'package:konesp/entity/task_entity.dart';
import 'package:konesp/entity/task_list_entity.dart';
import 'package:konesp/entity/upload_file_entity.dart';
import 'package:konesp/entity/user_department_entity.dart';
import 'package:konesp/entity/user_info_entity.dart';
import 'package:konesp/entity/validate_save_entity.dart';
import 'package:konesp/entity/weather_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AssistMemberEntity>[] is M) {
      return data.map<AssistMemberEntity>((Map<String, dynamic> e) => AssistMemberEntity.fromJson(e)).toList() as M;
    }
    if (<CaptchaAuthEntity>[] is M) {
      return data.map<CaptchaAuthEntity>((Map<String, dynamic> e) => CaptchaAuthEntity.fromJson(e)).toList() as M;
    }
    if (<CheckStuffsEntity>[] is M) {
      return data.map<CheckStuffsEntity>((Map<String, dynamic> e) => CheckStuffsEntity.fromJson(e)).toList() as M;
    }
    if (<CheckStuffsChild>[] is M) {
      return data.map<CheckStuffsChild>((Map<String, dynamic> e) => CheckStuffsChild.fromJson(e)).toList() as M;
    }
    if (<CheckUpdateEntity>[] is M) {
      return data.map<CheckUpdateEntity>((Map<String, dynamic> e) => CheckUpdateEntity.fromJson(e)).toList() as M;
    }
    if (<ContractEntity>[] is M) {
      return data.map<ContractEntity>((Map<String, dynamic> e) => ContractEntity.fromJson(e)).toList() as M;
    }
    if (<CustomFieldListEntity>[] is M) {
      return data.map<CustomFieldListEntity>((Map<String, dynamic> e) => CustomFieldListEntity.fromJson(e)).toList() as M;
    }
    if (<CustomField>[] is M) {
      return data.map<CustomField>((Map<String, dynamic> e) => CustomField.fromJson(e)).toList() as M;
    }
    if (<CustomerSignProject>[] is M) {
      return data.map<CustomerSignProject>((Map<String, dynamic> e) => CustomerSignProject.fromJson(e)).toList() as M;
    }
    if (<CustomerSignOrder>[] is M) {
      return data.map<CustomerSignOrder>((Map<String, dynamic> e) => CustomerSignOrder.fromJson(e)).toList() as M;
    }
    if (<CustomerSignModule>[] is M) {
      return data.map<CustomerSignModule>((Map<String, dynamic> e) => CustomerSignModule.fromJson(e)).toList() as M;
    }
    if (<CustomerSignNumber>[] is M) {
      return data.map<CustomerSignNumber>((Map<String, dynamic> e) => CustomerSignNumber.fromJson(e)).toList() as M;
    }
    if (<DashboardEntity>[] is M) {
      return data.map<DashboardEntity>((Map<String, dynamic> e) => DashboardEntity.fromJson(e)).toList() as M;
    }
    if (<DashboardProjectInfo>[] is M) {
      return data.map<DashboardProjectInfo>((Map<String, dynamic> e) => DashboardProjectInfo.fromJson(e)).toList() as M;
    }
    if (<DashboardFaultRepair>[] is M) {
      return data.map<DashboardFaultRepair>((Map<String, dynamic> e) => DashboardFaultRepair.fromJson(e)).toList() as M;
    }
    if (<DashboardToDoOrder>[] is M) {
      return data.map<DashboardToDoOrder>((Map<String, dynamic> e) => DashboardToDoOrder.fromJson(e)).toList() as M;
    }
    if (<DashboardTodayWork>[] is M) {
      return data.map<DashboardTodayWork>((Map<String, dynamic> e) => DashboardTodayWork.fromJson(e)).toList() as M;
    }
    if (<DepartmentInfoEntity>[] is M) {
      return data.map<DepartmentInfoEntity>((Map<String, dynamic> e) => DepartmentInfoEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceProjectEntity>[] is M) {
      return data.map<DeviceProjectEntity>((Map<String, dynamic> e) => DeviceProjectEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceProjectEquipmentInfoList>[] is M) {
      return data.map<DeviceProjectEquipmentInfoList>((Map<String, dynamic> e) => DeviceProjectEquipmentInfoList.fromJson(e)).toList() as M;
    }
    if (<EquipmentDetailEntity>[] is M) {
      return data.map<EquipmentDetailEntity>((Map<String, dynamic> e) => EquipmentDetailEntity.fromJson(e)).toList() as M;
    }
    if (<FixDetailEntity>[] is M) {
      return data.map<FixDetailEntity>((Map<String, dynamic> e) => FixDetailEntity.fromJson(e)).toList() as M;
    }
    if (<FixDetailAssistEmployee>[] is M) {
      return data.map<FixDetailAssistEmployee>((Map<String, dynamic> e) => FixDetailAssistEmployee.fromJson(e)).toList() as M;
    }
    if (<FixOrderProcessEntity>[] is M) {
      return data.map<FixOrderProcessEntity>((Map<String, dynamic> e) => FixOrderProcessEntity.fromJson(e)).toList() as M;
    }
    if (<GroupMemberEntity>[] is M) {
      return data.map<GroupMemberEntity>((Map<String, dynamic> e) => GroupMemberEntity.fromJson(e)).toList() as M;
    }
    if (<HelpCenterEntity>[] is M) {
      return data.map<HelpCenterEntity>((Map<String, dynamic> e) => HelpCenterEntity.fromJson(e)).toList() as M;
    }
    if (<IotEntity>[] is M) {
      return data.map<IotEntity>((Map<String, dynamic> e) => IotEntity.fromJson(e)).toList() as M;
    }
    if (<LocationEntity>[] is M) {
      return data.map<LocationEntity>((Map<String, dynamic> e) => LocationEntity.fromJson(e)).toList() as M;
    }
    if (<LoginEntity>[] is M) {
      return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
    }
    if (<MainResponseEntity>[] is M) {
      return data.map<MainResponseEntity>((Map<String, dynamic> e) => MainResponseEntity.fromJson(e)).toList() as M;
    }
    if (<MainResponseMember>[] is M) {
      return data.map<MainResponseMember>((Map<String, dynamic> e) => MainResponseMember.fromJson(e)).toList() as M;
    }
    if (<MaintaineGroupEntity>[] is M) {
      return data.map<MaintaineGroupEntity>((Map<String, dynamic> e) => MaintaineGroupEntity.fromJson(e)).toList() as M;
    }
    if (<MemberDataEntity>[] is M) {
      return data.map<MemberDataEntity>((Map<String, dynamic> e) => MemberDataEntity.fromJson(e)).toList() as M;
    }
    if (<MessageEntity>[] is M) {
      return data.map<MessageEntity>((Map<String, dynamic> e) => MessageEntity.fromJson(e)).toList() as M;
    }
    if (<MessageListEntity>[] is M) {
      return data.map<MessageListEntity>((Map<String, dynamic> e) => MessageListEntity.fromJson(e)).toList() as M;
    }
    if (<OrderRuleEntity>[] is M) {
      return data.map<OrderRuleEntity>((Map<String, dynamic> e) => OrderRuleEntity.fromJson(e)).toList() as M;
    }
    if (<OssTokenEntity>[] is M) {
      return data.map<OssTokenEntity>((Map<String, dynamic> e) => OssTokenEntity.fromJson(e)).toList() as M;
    }
    if (<OverTimeEntity>[] is M) {
      return data.map<OverTimeEntity>((Map<String, dynamic> e) => OverTimeEntity.fromJson(e)).toList() as M;
    }
    if (<OverTimeModuleInfo>[] is M) {
      return data.map<OverTimeModuleInfo>((Map<String, dynamic> e) => OverTimeModuleInfo.fromJson(e)).toList() as M;
    }
    if (<OverTimeAdjustOrder>[] is M) {
      return data.map<OverTimeAdjustOrder>((Map<String, dynamic> e) => OverTimeAdjustOrder.fromJson(e)).toList() as M;
    }
    if (<ProjectDetailEntity>[] is M) {
      return data.map<ProjectDetailEntity>((Map<String, dynamic> e) => ProjectDetailEntity.fromJson(e)).toList() as M;
    }
    if (<ProjectEntity>[] is M) {
      return data.map<ProjectEntity>((Map<String, dynamic> e) => ProjectEntity.fromJson(e)).toList() as M;
    }
    if (<RegularDetailEntity>[] is M) {
      return data.map<RegularDetailEntity>((Map<String, dynamic> e) => RegularDetailEntity.fromJson(e)).toList() as M;
    }
    if (<RegularOrderProcessEntity>[] is M) {
      return data.map<RegularOrderProcessEntity>((Map<String, dynamic> e) => RegularOrderProcessEntity.fromJson(e)).toList() as M;
    }
    if (<SearchSummaryEntity>[] is M) {
      return data.map<SearchSummaryEntity>((Map<String, dynamic> e) => SearchSummaryEntity.fromJson(e)).toList() as M;
    }
    if (<ServiceGroupEntity>[] is M) {
      return data.map<ServiceGroupEntity>((Map<String, dynamic> e) => ServiceGroupEntity.fromJson(e)).toList() as M;
    }
    if (<ServiceGroupMember>[] is M) {
      return data.map<ServiceGroupMember>((Map<String, dynamic> e) => ServiceGroupMember.fromJson(e)).toList() as M;
    }
    if (<TaskEntity>[] is M) {
      return data.map<TaskEntity>((Map<String, dynamic> e) => TaskEntity.fromJson(e)).toList() as M;
    }
    if (<TaskGroup>[] is M) {
      return data.map<TaskGroup>((Map<String, dynamic> e) => TaskGroup.fromJson(e)).toList() as M;
    }
    if (<TaskMember>[] is M) {
      return data.map<TaskMember>((Map<String, dynamic> e) => TaskMember.fromJson(e)).toList() as M;
    }
    if (<TaskProject>[] is M) {
      return data.map<TaskProject>((Map<String, dynamic> e) => TaskProject.fromJson(e)).toList() as M;
    }
    if (<MyTaskEntity>[] is M) {
      return data.map<MyTaskEntity>((Map<String, dynamic> e) => MyTaskEntity.fromJson(e)).toList() as M;
    }
    if (<GroupDetailEntity>[] is M) {
      return data.map<GroupDetailEntity>((Map<String, dynamic> e) => GroupDetailEntity.fromJson(e)).toList() as M;
    }
    if (<GroupListRootEntity>[] is M) {
      return data.map<GroupListRootEntity>((Map<String, dynamic> e) => GroupListRootEntity.fromJson(e)).toList() as M;
    }
    if (<TaskListEntity>[] is M) {
      return data.map<TaskListEntity>((Map<String, dynamic> e) => TaskListEntity.fromJson(e)).toList() as M;
    }
    if (<UploadFileEntity>[] is M) {
      return data.map<UploadFileEntity>((Map<String, dynamic> e) => UploadFileEntity.fromJson(e)).toList() as M;
    }
    if (<UserDepartmentEntity>[] is M) {
      return data.map<UserDepartmentEntity>((Map<String, dynamic> e) => UserDepartmentEntity.fromJson(e)).toList() as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data.map<UserInfoEntity>((Map<String, dynamic> e) => UserInfoEntity.fromJson(e)).toList() as M;
    }
    if (<UserInfoRoleEntity>[] is M) {
      return data.map<UserInfoRoleEntity>((Map<String, dynamic> e) => UserInfoRoleEntity.fromJson(e)).toList() as M;
    }
    if (<ValidateSaveEntity>[] is M) {
      return data.map<ValidateSaveEntity>((Map<String, dynamic> e) => ValidateSaveEntity.fromJson(e)).toList() as M;
    }
    if (<WeatherEntity>[] is M) {
      return data.map<WeatherEntity>((Map<String, dynamic> e) => WeatherEntity.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AssistMemberEntity).toString(): AssistMemberEntity.fromJson,
    (CaptchaAuthEntity).toString(): CaptchaAuthEntity.fromJson,
    (CheckStuffsEntity).toString(): CheckStuffsEntity.fromJson,
    (CheckStuffsChild).toString(): CheckStuffsChild.fromJson,
    (CheckUpdateEntity).toString(): CheckUpdateEntity.fromJson,
    (ContractEntity).toString(): ContractEntity.fromJson,
    (CustomFieldListEntity).toString(): CustomFieldListEntity.fromJson,
    (CustomField).toString(): CustomField.fromJson,
    (CustomerSignProject).toString(): CustomerSignProject.fromJson,
    (CustomerSignOrder).toString(): CustomerSignOrder.fromJson,
    (CustomerSignModule).toString(): CustomerSignModule.fromJson,
    (CustomerSignNumber).toString(): CustomerSignNumber.fromJson,
    (DashboardEntity).toString(): DashboardEntity.fromJson,
    (DashboardProjectInfo).toString(): DashboardProjectInfo.fromJson,
    (DashboardFaultRepair).toString(): DashboardFaultRepair.fromJson,
    (DashboardToDoOrder).toString(): DashboardToDoOrder.fromJson,
    (DashboardTodayWork).toString(): DashboardTodayWork.fromJson,
    (DepartmentInfoEntity).toString(): DepartmentInfoEntity.fromJson,
    (DeviceProjectEntity).toString(): DeviceProjectEntity.fromJson,
    (DeviceProjectEquipmentInfoList).toString(): DeviceProjectEquipmentInfoList.fromJson,
    (EquipmentDetailEntity).toString(): EquipmentDetailEntity.fromJson,
    (FixDetailEntity).toString(): FixDetailEntity.fromJson,
    (FixDetailAssistEmployee).toString(): FixDetailAssistEmployee.fromJson,
    (FixOrderProcessEntity).toString(): FixOrderProcessEntity.fromJson,
    (GroupMemberEntity).toString(): GroupMemberEntity.fromJson,
    (HelpCenterEntity).toString(): HelpCenterEntity.fromJson,
    (IotEntity).toString(): IotEntity.fromJson,
    (LocationEntity).toString(): LocationEntity.fromJson,
    (LoginEntity).toString(): LoginEntity.fromJson,
    (MainResponseEntity).toString(): MainResponseEntity.fromJson,
    (MainResponseMember).toString(): MainResponseMember.fromJson,
    (MaintaineGroupEntity).toString(): MaintaineGroupEntity.fromJson,
    (MemberDataEntity).toString(): MemberDataEntity.fromJson,
    (MessageEntity).toString(): MessageEntity.fromJson,
    (MessageListEntity).toString(): MessageListEntity.fromJson,
    (OrderRuleEntity).toString(): OrderRuleEntity.fromJson,
    (OssTokenEntity).toString(): OssTokenEntity.fromJson,
    (OverTimeEntity).toString(): OverTimeEntity.fromJson,
    (OverTimeModuleInfo).toString(): OverTimeModuleInfo.fromJson,
    (OverTimeAdjustOrder).toString(): OverTimeAdjustOrder.fromJson,
    (ProjectDetailEntity).toString(): ProjectDetailEntity.fromJson,
    (ProjectEntity).toString(): ProjectEntity.fromJson,
    (RegularDetailEntity).toString(): RegularDetailEntity.fromJson,
    (RegularOrderProcessEntity).toString(): RegularOrderProcessEntity.fromJson,
    (SearchSummaryEntity).toString(): SearchSummaryEntity.fromJson,
    (ServiceGroupEntity).toString(): ServiceGroupEntity.fromJson,
    (ServiceGroupMember).toString(): ServiceGroupMember.fromJson,
    (TaskEntity).toString(): TaskEntity.fromJson,
    (TaskGroup).toString(): TaskGroup.fromJson,
    (TaskMember).toString(): TaskMember.fromJson,
    (TaskProject).toString(): TaskProject.fromJson,
    (MyTaskEntity).toString(): MyTaskEntity.fromJson,
    (GroupDetailEntity).toString(): GroupDetailEntity.fromJson,
    (GroupListRootEntity).toString(): GroupListRootEntity.fromJson,
    (TaskListEntity).toString(): TaskListEntity.fromJson,
    (UploadFileEntity).toString(): UploadFileEntity.fromJson,
    (UserDepartmentEntity).toString(): UserDepartmentEntity.fromJson,
    (UserInfoEntity).toString(): UserInfoEntity.fromJson,
    (UserInfoRoleEntity).toString(): UserInfoRoleEntity.fromJson,
    (ValidateSaveEntity).toString(): ValidateSaveEntity.fromJson,
    (WeatherEntity).toString(): WeatherEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}